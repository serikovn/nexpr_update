require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs').promises;
const path = require('path');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const ADMINS = [1355294435];

const PROBLEMS_FILE = path.join(__dirname, 'problems.json');
const SUBSCRIBERS_FILE = path.join(__dirname, 'subscribers.json');
const USERS_FILE = path.join(__dirname, 'users.json');

const adminStates = {};
const routeSubscribers = {};

async function loadProblems() {
    try {
        const data = await fs.readFile(PROBLEMS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await saveProblems([]);
            return [];
        }
        throw error;
    }
}

async function saveProblems(problems) {
    await fs.writeFile(PROBLEMS_FILE, JSON.stringify(problems, null, 2));
}

async function loadSubscribers() {
    try {
        const data = await fs.readFile(SUBSCRIBERS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await saveSubscribers({});
            return {};
        }
        throw error;
    }
}

async function saveSubscribers(subscribers) {
    await fs.writeFile(SUBSCRIBERS_FILE, JSON.stringify(subscribers, null, 2));
}

async function loadUsers() {
    try {
        const data = await fs.readFile(USERS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await saveUsers([]);
            return [];
        }
        throw error;
    }
}

async function saveUsers(users) {
    await fs.writeFile(USERS_FILE, JSON.stringify(users, null, 2));
}

function formatDate(date = new Date()) {
    const moscowDate = new Date(date.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));
    const options = {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        timeZone: 'Europe/Moscow'
    };
    return moscowDate.toLocaleDateString('ru-RU', options);
}

function isAdmin(userId) {
    return ADMINS.includes(userId);
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const problems = await loadProblems();
    const currentDate = formatDate();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const users = await loadUsers();
    if (!users.includes(userId)) {
        users.push(userId);
        await saveUsers(users);
    }

    if (problems.length === 0) {
        await bot.sendMessage(chatId, `–ù–∞ ${currentDate} –ù–æ—á–Ω–æ–π –≠–∫—Å–ø—Ä–µ—Å—Å –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.`);
    } else {
        const keyboard = {
            inline_keyboard: problems.map(problem => [{
                text: problem.name,
                callback_data: `direction_${problem.name}`
            }])
        };

        await bot.sendMessage(
            chatId,
            `–ù–∞ ${currentDate} –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö –ù–æ—á–Ω–æ–≥–æ –≠–∫—Å–ø—Ä–µ—Å—Å–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:`,
            { reply_markup: keyboard }
        );
    }
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('direction_')) {
        const directionName = data.replace('direction_', '');
        const problems = await loadProblems();
        const problem = problems.find(p => p.name === directionName);

        if (problem) {
            if (problem.media && problem.media.length > 0) {
                try {
                    const mediaGroup = problem.media.map(item => {
                        if (item.type === 'photo') {
                            return {
                                type: 'photo',
                                media: item.file,
                                parse_mode: 'HTML'
                            };
                        } else if (item.type === 'video') {
                            return {
                                type: 'video',
                                media: item.file,
                                parse_mode: 'HTML'
                            };
                        }
                    }).filter(Boolean);

                    if (mediaGroup.length > 0) {
                        await bot.sendMediaGroup(chatId, mediaGroup);
                    }
                } catch (error) {
                    console.error('Error sending media group:', error);
                }
            }

            const formattedEta = problem.eta;
            const description = `${problem.name}: ${problem.description}, –ø—Ä–æ–≥–Ω–æ–∑ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è ‚Äî ${formattedEta}.`;
            
            const subscribers = await loadSubscribers();
            const isSubscribed = subscribers[directionName]?.includes(query.from.id);
            
            const keyboard = {
                inline_keyboard: [[
                    {
                        text: isSubscribed ? '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã' : 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                        callback_data: isSubscribed ? `unsubscribe_${directionName}` : `subscribe_${directionName}`
                    }
                ]]
            };
            
            await bot.sendMessage(chatId, description, { reply_markup: keyboard });
        }

        await bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('subscribe_')) {
        const directionName = data.replace('subscribe_', '');
        const subscribers = await loadSubscribers();
        
        if (!subscribers[directionName]) {
            subscribers[directionName] = [];
        }
        
        if (!subscribers[directionName].includes(query.from.id)) {
            subscribers[directionName].push(query.from.id);
            await saveSubscribers(subscribers);
            await bot.answerCallbackQuery(query.id, {
                text: '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É',
                show_alert: true
            });
            
            const keyboard = {
                inline_keyboard: [[
                    {
                        text: '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã',
                        callback_data: `unsubscribe_${directionName}`
                    }
                ]]
            };
            await bot.editMessageReplyMarkup(keyboard, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id
            });
        }
    } else if (data.startsWith('unsubscribe_')) {
        const directionName = data.replace('unsubscribe_', '');
        const subscribers = await loadSubscribers();
        
        if (subscribers[directionName]) {
            subscribers[directionName] = subscribers[directionName].filter(id => id !== query.from.id);
            await saveSubscribers(subscribers);
            await bot.answerCallbackQuery(query.id, {
                text: 'üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
                show_alert: true
            });
            
            const keyboard = {
                inline_keyboard: [[
                    {
                        text: 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                        callback_data: `subscribe_${directionName}`
                    }
                ]]
            };
            await bot.editMessageReplyMarkup(keyboard, {
                chat_id: query.message.chat.id,
                message_id: query.message.message_id
            });
        }
    }
});

bot.onText(/\/add/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    adminStates[userId] = { command: 'add', step: 'name' };
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
});

bot.onText(/\/remove/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const problems = await loadProblems();
    if (problems.length === 0) {
        return bot.sendMessage(chatId, '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }

    const keyboard = {
        inline_keyboard: problems.map(problem => [{
            text: `–£–¥–∞–ª–∏—Ç—å: ${problem.name}`,
            callback_data: `remove_${problem.name}`
        }])
    };

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', { reply_markup: keyboard });
});

bot.onText(/\/resolve (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const problemName = match[1];

    if (!isAdmin(userId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const problems = await loadProblems();
    const problemIndex = problems.findIndex(p => p.name === problemName);
    
    if (problemIndex === -1) {
        return bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–±–ª–µ–º–∞ "${problemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    const subscribers = await loadSubscribers();
    const subscriberList = subscribers[problemName] || [];
    
    if (subscriberList.length > 0) {
        const notificationMessage = `‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ¬´${problemName}¬ª —Ä–µ—à–µ–Ω–∞. –ú–∞—à–∏–Ω—ã –ù–æ—á–Ω–æ–≥–æ –≠–∫—Å–ø—Ä–µ—Å—Å–∞ —Å–Ω–æ–≤–∞ –∏–¥—É—Ç –ø–æ –≥—Ä–∞—Ñ–∏–∫—É!`;
        
        for (const subscriberId of subscriberList) {
            try {
                await bot.sendMessage(subscriberId, notificationMessage);
            } catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriberId}:`, error);
            }
        }
        
        delete subscribers[problemName];
        await saveSubscribers(subscribers);
    }
    
    problems.splice(problemIndex, 1);
    await saveProblems(problems);
    
    await bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ "${problemName}" —Ä–µ—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriberList.length}`);
});

bot.onText(/\/list/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const problems = await loadProblems();
    if (problems.length === 0) {
        return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –ø—É—Å—Ç.');
    }

    let message = 'üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n\n';
    problems.forEach((problem, index) => {
        message += `${index + 1}. ${problem.name}\n`;
        message += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${problem.description}\n`;
        message += `   –ü—Ä–æ–≥–Ω–æ–∑: ${problem.eta}\n`;
        message += `   –ú–µ–¥–∏–∞: ${problem.media ? problem.media.length : 0} —Ñ–∞–π–ª–æ–≤\n\n`;
    });

    await bot.sendMessage(chatId, message);
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (data.startsWith('remove_') && isAdmin(userId)) {
        const directionName = data.replace('remove_', '');
        const problems = await loadProblems();
        const filteredProblems = problems.filter(p => p.name !== directionName);
        
        if (filteredProblems.length < problems.length) {
            await saveProblems(filteredProblems);
            await bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ "${directionName}" —É–¥–∞–ª–µ–Ω–∞.`);
        } else {
            await bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–±–ª–µ–º–∞ "${directionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
        
        await bot.answerCallbackQuery(query.id);
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (!adminStates[userId] || !isAdmin(userId)) return;
    if (text && text.startsWith('/')) return;

    const state = adminStates[userId];

    if (state.command === 'add') {
        switch (state.step) {
            case 'name':
                adminStates[userId].problem = { name: text, media: [] };
                adminStates[userId].step = 'description';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:');
                break;

            case 'description':
                adminStates[userId].problem.description = text;
                adminStates[userId].step = 'eta';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7 —Å–µ–Ω—Ç—è–±—Ä—è, 15:00):');
                break;

            case 'eta':
                adminStates[userId].problem.eta = text;
                adminStates[userId].step = 'media';
                await bot.sendMessage(chatId, 
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö.\n' +
                    '–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n' +
                    '–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ" –∏–ª–∏ "done".'
                );
                break;

            case 'media':
                if (text && (text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || text.toLowerCase() === 'done')) {
                    const problems = await loadProblems();
                    const newProblem = adminStates[userId].problem;
                    problems.push(newProblem);
                    await saveProblems(problems);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    const users = await loadUsers();
                    const notificationMessage = `‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ!\n\nüìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${newProblem.name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${newProblem.description}\n‚è∞ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: ${newProblem.eta}\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start`;
                    
                    for (const recipientId of users) {
                        if (recipientId !== userId) { // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–ª
                            try {
                                await bot.sendMessage(recipientId, notificationMessage);
                            } catch (error) {
                                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientId}:`, error);
                            }
                        }
                    }
                    
                    await bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ "${newProblem.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞.\nüì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${users.length - 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
                    delete adminStates[userId];
                } else if (text) {
                    if (text.startsWith('http://') || text.startsWith('https://')) {
                        const type = text.match(/\.(jpg|jpeg|png|gif)$/i) ? 'photo' : 'video';
                        adminStates[userId].problem.media.push({ type, file: text });
                        await bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ (${type}). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".`);
                    } else {
                        await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.');
                    }
                }
                break;
        }
    }
});

bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!adminStates[userId] || !isAdmin(userId)) return;
    
    const state = adminStates[userId];
    if (state.command === 'add' && state.step === 'media') {
        const fileId = msg.photo[msg.photo.length - 1].file_id;
        adminStates[userId].problem.media.push({ type: 'photo', file: fileId });
        await bot.sendMessage(chatId, '‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".');
    }
});

bot.on('video', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!adminStates[userId] || !isAdmin(userId)) return;
    
    const state = adminStates[userId];
    if (state.command === 'add' && state.step === 'media') {
        const fileId = msg.video.file_id;
        adminStates[userId].problem.media.push({ type: 'video', file: fileId });
        await bot.sendMessage(chatId, '‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ—Ç–æ–≤–æ".');
    }
});

console.log('üöÄ –ë–æ—Ç –ù–æ—á–Ω–æ–π –≠–∫—Å–ø—Ä–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!');
console.log('‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env');
console.log('‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å Telegram ID –∞–¥–º–∏–Ω–æ–≤ –≤ –º–∞—Å—Å–∏–≤ ADMINS');